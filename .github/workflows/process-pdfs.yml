name: Process Happy Shopping PDFs

on:
  schedule:
    # Run daily at 6:00 AM JST (21:00 UTC previous day)
    - cron: '0 21 * * *'  
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_processing:
        description: 'Force processing even if URLs haven't changed'
        required: false
        default: 'false'
        type: boolean
  push:
    paths:
      - 'scripts/process_pdfs.py'
      - '.github/workflows/process-pdfs.yml'

jobs:
  discover-and-process:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push commits
      actions: read   # Required to read workflow files
    outputs:
      data_updated: ${{ steps.process.outputs.data_updated }}
      shops_count: ${{ steps.process.outputs.shops_count }}
      pdfs_processed: ${{ steps.process.outputs.pdfs_processed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better git operations
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create data directory
      run: mkdir -p data
        
    - name: Debug Test (No API Usage)
      run: |
        cd scripts
        echo "🧪 Running debug tests first..."
        python debug_test.py || echo "Debug test completed with issues"
        
    - name: Discover and Process PDFs with Gemini AI
      id: process
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        FORCE_PROCESSING: ${{ github.event.inputs.force_processing || 'false' }}
      run: |
        # Debug secret access first
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "❌ GEMINI_API_KEY is not accessible in this workflow"
          echo "Please check repository secrets configuration"
          exit 1
        else
          echo "✅ GEMINI_API_KEY is accessible (${#GEMINI_API_KEY} chars)"
        fi
        
        cd scripts
        echo "🔍 Starting PDF discovery and processing..."
        
        # Show environment info
        echo "Python version: $(python --version)"
        echo "Working directory: $(pwd)"
        echo "Files in directory: $(ls -la)"
        
        if [[ "${{ github.event.inputs.force_processing }}" == "true" ]]; then
          echo "🔄 Force processing enabled via workflow input"
          python process_pdfs.py --force
        else
          python process_pdfs.py
        fi
        
    - name: Check and commit data files
      id: check_changes
      run: |
        # Check if latest.json was created (indicates processing happened)
        # This approach avoids problematic git status --cached commands
        if [ -f "data/latest.json" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "📊 Data files updated, committing changes"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          # Add data files
          git add data/
          
          # Debug info
          echo "📁 Files in data directory:"
          ls -la data/
          
          # Get shop count for commit message
          SHOPS_COUNT=$(cat data/latest.json | python -c "import sys, json; print(json.load(sys.stdin)['totalShops'])" 2>/dev/null || echo "unknown")
          
          # Commit and push the changes
          git commit -m "🤖 Update shop data - $(date -u +"%Y-%m-%d %H:%M UTC")

          📊 Shop count: ${SHOPS_COUNT}
          🤖 Model: gemini-2.5-flash
          🗺️  Coordinates: Google Maps geocoding
          🔍 Auto-discovered PDFs from happy-kaimonoken.info"
          
          echo "📤 Pushing changes to repository..."
          git push
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "📊 No processing needed - PDF URLs haven't changed"
        fi
        
    - name: Get current date
      id: date
      if: steps.check_changes.outputs.changed == 'true'
      run: echo "date=$(date -u +"%Y-%m-%d %H:%M UTC")" >> $GITHUB_OUTPUT
        
    - name: Create release on data updates
      if: steps.check_changes.outputs.changed == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: data-${{ github.run_number }}
        name: Shop Data Update - ${{ steps.date.outputs.date }}
        body: |
          🤖 Automated update of Happy Shopping Map data
          
          ### 📊 Update Summary
          - **Updated**: ${{ steps.date.outputs.date }}
          - **Shops**: ${{ steps.process.outputs.shops_count || 'N/A' }} total
          - **PDFs Processed**: ${{ steps.process.outputs.pdfs_processed || 'N/A' }}
          - **Model**: gemini-2.5-flash
          - **Discovery**: Auto-discovered from happy-kaimonoken.info
          
          ### 🔄 Changes Made
          - Shop data refreshed from latest discovered PDFs
          - Coordinates updated using AI geocoding  
          - Data quality verified and structured
          - URLs automatically tracked for changes
          
          ### 📱 iOS App Integration
          Your app automatically fetches from:
          ```
          https://raw.githubusercontent.com/${{ github.repository }}/main/data/latest.json
          ```
          
          ### 🛠️ Technical Details
          - Python script with web scraping for PDF discovery
          - Gemini 2.5 Flash for AI processing
          - Automatic change detection and processing
          - Daily checks at 6:00 AM JST
        draft: false
        prerelease: false
        
    - name: Upload data artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shop-data-${{ github.run_number }}
        path: data/
        retention-days: 30
        
    - name: Summary
      run: |
        echo "🎉 Workflow completed!"
        echo "📊 Data updated: ${{ steps.check_changes.outputs.changed }}"
        if [[ "${{ steps.process.outputs.shops_count }}" != "" ]]; then
          echo "🏪 Shops processed: ${{ steps.process.outputs.shops_count }}"
        fi
        if [[ "${{ steps.process.outputs.pdfs_processed }}" != "" ]]; then
          echo "📄 PDFs processed: ${{ steps.process.outputs.pdfs_processed }}"
        fi